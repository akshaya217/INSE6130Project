import java.util.ArrayList;
import java.util.Arrays;


public class FeatureExtractor {
	
	public void extract(float[] times, int[] sizes, ArrayList<String> features){
		
		//transmission size features 
		features.add(""+times.length);
		
		int c = 0;
		for(int i=0; i<sizes.length; i++){
			if (sizes[i]>0)
				c++;
		}
		
		features.add(""+c);
		features.add(""+(times.length - c));
		features.add(""+(times[-1] - times[0]));
		
		//unique packet lengths
		for(int i=-1500; i<1501; i++){
			if (Arrays.asList(sizes).contains(i))
				features.add(""+1);
			else
				features.add(""+0);
		}
		
		//Transposition (similar to good distance scheme)
		c = 0;
		for(int i=0; i<sizes.length; i++){
			if(sizes[i] > 0){
				c++;
				features.add(""+i);
			}
			if(c == 300)
				break;
		}
		for(int i=c; i<300; i++){
			features.add("X");
		}
		
		c = 0;
		int previousLocation = 0;
		for(int i=0; i<sizes.length;i++){
			if(sizes[i] > 0){
				c++;
				features.add(""+(i-previousLocation));
				previousLocation = i;
			}
			if(c == 300)
				break;
		}
		for(int i=c; i<300; i++){
			features.add("X");
		}
		
		//Packet distributions (where are the outgoing packets concentrated)
		for(int i=0; i< Math.min(sizes.length, 3000); i++){
			if(i % 30 != 29){
				if(sizes[i]>0)
					c++;
			}else{
				features.add(""+c);
				c = 0;
			}
		}
		
		for(int i=sizes.length/30;i<100;i++){
			features.add(""+0);
		}
		
		//Bursts
		ArrayList<Integer> bursts = new ArrayList<Integer>();
		int currentBurst = 0;
		int stopped = 0;
		for(int i=0; i<sizes.length;i++){
			if(sizes[i] < 0){
				stopped = 0;
				currentBurst -= sizes[i]; 
			}else if(sizes[i] > 0 && stopped == 0){
				stopped = 1;
			}else if(sizes[i] > 0 && stopped == 1){
				stopped = 0;
				bursts.add(currentBurst);
			}
		}
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
